{
  "{\"assumptions\":{},\"sourceRoot\":\"/home/scorp/git/appwork/app2/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/scorp/git/appwork/app2\",\"filename\":\"/home/scorp/git/appwork/app2/index.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/scorp/git/appwork/app2\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.15.8": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "/home/scorp/git/appwork/app2/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/home/scorp/git/appwork/app2",
      "filename": "/home/scorp/git/appwork/app2/index.js",
      "targets": {},
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "browserslistConfigFile": false,
      "envName": "development",
      "root": "/home/scorp/git/appwork/app2",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/scorp/git/appwork/app2/index.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/home/scorp/git/appwork/app2/index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/scorp/git/appwork/app2/",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "const express = require('express');\n\nconst {\n  graphqlHTTP\n} = require('express-graphql');\n\nconst Schema = require('./database/schema/schema');\n\nconst app = express();\nconst port = 3000;\napp.use('/graphql', graphqlHTTP({\n  schema: Schema,\n  graphql: true\n}));\napp.get('/', (req, res) => {\n  res.send('Hello World!');\n});\napp.listen(port, () => {\n  console.log('Example app listening at https://localhost:${port}');\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImV4cHJlc3MiLCJyZXF1aXJlIiwiZ3JhcGhxbEhUVFAiLCJTY2hlbWEiLCJhcHAiLCJwb3J0IiwidXNlIiwic2NoZW1hIiwiZ3JhcGhxbCIsImdldCIsInJlcSIsInJlcyIsInNlbmQiLCJsaXN0ZW4iLCJjb25zb2xlIiwibG9nIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxTQUFELENBQXZCOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUFrQkQsT0FBTyxDQUFDLGlCQUFELENBQS9COztBQUNBLE1BQU1FLE1BQU0sR0FBR0YsT0FBTyxDQUFDLDBCQUFELENBQXRCOztBQUVBLE1BQU1HLEdBQUcsR0FBR0osT0FBTyxFQUFuQjtBQUNBLE1BQU1LLElBQUksR0FBRyxJQUFiO0FBRUFELEdBQUcsQ0FBQ0UsR0FBSixDQUFRLFVBQVIsRUFBb0JKLFdBQVcsQ0FBQztBQUFFSyxFQUFBQSxNQUFNLEVBQUVKLE1BQVY7QUFBa0JLLEVBQUFBLE9BQU8sRUFBRTtBQUEzQixDQUFELENBQS9CO0FBRUFKLEdBQUcsQ0FBQ0ssR0FBSixDQUFRLEdBQVIsRUFBYSxDQUFDQyxHQUFELEVBQU1DLEdBQU4sS0FBYztBQUN6QkEsRUFBQUEsR0FBRyxDQUFDQyxJQUFKLENBQVMsY0FBVDtBQUNELENBRkQ7QUFJQVIsR0FBRyxDQUFDUyxNQUFKLENBQVdSLElBQVgsRUFBaUIsTUFBTTtBQUNyQlMsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksb0RBQVo7QUFDRCxDQUZEIiwic291cmNlUm9vdCI6Ii9ob21lL3Njb3JwL2dpdC9hcHB3b3JrL2FwcDIvIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKVxuY29uc3QgeyBncmFwaHFsSFRUUCB9ID0gcmVxdWlyZSgnZXhwcmVzcy1ncmFwaHFsJylcbmNvbnN0IFNjaGVtYSA9IHJlcXVpcmUoJy4vZGF0YWJhc2Uvc2NoZW1hL3NjaGVtYScpXG5cbmNvbnN0IGFwcCA9IGV4cHJlc3MoKVxuY29uc3QgcG9ydCA9IDMwMDBcblxuYXBwLnVzZSgnL2dyYXBocWwnLCBncmFwaHFsSFRUUCh7IHNjaGVtYTogU2NoZW1hLCBncmFwaHFsOiB0cnVlIH0pKVxuXG5hcHAuZ2V0KCcvJywgKHJlcSwgcmVzKSA9PiB7XG4gIHJlcy5zZW5kKCdIZWxsbyBXb3JsZCEnKVxufSlcblxuYXBwLmxpc3Rlbihwb3J0LCAoKSA9PiB7XG4gIGNvbnNvbGUubG9nKCdFeGFtcGxlIGFwcCBsaXN0ZW5pbmcgYXQgaHR0cHM6Ly9sb2NhbGhvc3Q6JHtwb3J0fScpXG59KVxuXG5cbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "express",
        "require",
        "graphqlHTTP",
        "Schema",
        "app",
        "port",
        "use",
        "schema",
        "graphql",
        "get",
        "req",
        "res",
        "send",
        "listen",
        "console",
        "log"
      ],
      "mappings": "AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAkBD,OAAO,CAAC,iBAAD,CAA/B;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,0BAAD,CAAtB;;AAEA,MAAMG,GAAG,GAAGJ,OAAO,EAAnB;AACA,MAAMK,IAAI,GAAG,IAAb;AAEAD,GAAG,CAACE,GAAJ,CAAQ,UAAR,EAAoBJ,WAAW,CAAC;AAAEK,EAAAA,MAAM,EAAEJ,MAAV;AAAkBK,EAAAA,OAAO,EAAE;AAA3B,CAAD,CAA/B;AAEAJ,GAAG,CAACK,GAAJ,CAAQ,GAAR,EAAa,CAACC,GAAD,EAAMC,GAAN,KAAc;AACzBA,EAAAA,GAAG,CAACC,IAAJ,CAAS,cAAT;AACD,CAFD;AAIAR,GAAG,CAACS,MAAJ,CAAWR,IAAX,EAAiB,MAAM;AACrBS,EAAAA,OAAO,CAACC,GAAR,CAAY,oDAAZ;AACD,CAFD",
      "sourceRoot": "/home/scorp/git/appwork/app2/",
      "sourcesContent": [
        "const express = require('express')\nconst { graphqlHTTP } = require('express-graphql')\nconst Schema = require('./database/schema/schema')\n\nconst app = express()\nconst port = 3000\n\napp.use('/graphql', graphqlHTTP({ schema: Schema, graphql: true }))\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(port, () => {\n  console.log('Example app listening at https://localhost:${port}')\n})\n\n\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1633838280002
  },
  "{\"assumptions\":{},\"sourceRoot\":\"/home/scorp/git/appwork/app2/database/schema/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/scorp/git/appwork/app2\",\"filename\":\"/home/scorp/git/appwork/app2/database/schema/schema.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/scorp/git/appwork/app2\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.15.8": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "/home/scorp/git/appwork/app2/database/schema/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/home/scorp/git/appwork/app2",
      "filename": "/home/scorp/git/appwork/app2/database/schema/schema.js",
      "targets": {},
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "browserslistConfigFile": false,
      "envName": "development",
      "root": "/home/scorp/git/appwork/app2",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/scorp/git/appwork/app2/database/schema/schema.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/home/scorp/git/appwork/app2/database/schema/schema.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/scorp/git/appwork/app2/database/schema/",
        "sourceFileName": "schema.js"
      }
    },
    "ast": null,
    "code": "const db = require('../models/models');\n\nconst {\n  GraphQLObjectType,\n  GraphQLString,\n  GraphQLInt,\n  GraphQLSchema,\n  GraphQLList,\n  GraphQLNonNull\n} = require('graphql');\n\nconst User = new GraphQLObjectType({\n  name: 'User',\n  description: 'this represents a user',\n  fields: () => {\n    return {\n      id: {\n        type: GraphQLInt,\n\n        resolve(user) {\n          return user.id;\n        }\n\n      },\n      firstName: {\n        type: GraphQLString,\n\n        resolve(user) {\n          return user.firstName;\n        }\n\n      }\n    };\n  }\n});\nconst Query = new GraphQLObjectType({\n  name: 'Query',\n  description: 'this is a root query',\n  fields: () => {\n    return {\n      users: {\n        type: new GraphQLList(User),\n        args: {\n          id: {\n            type: GraphQLInt\n          },\n          firstName: {\n            type: GraphQLString\n          }\n        },\n\n        //validations can go here\n        resolve(root, args) {\n          return db.models.user.findAll({\n            where: args\n          });\n        }\n\n      }\n    };\n  }\n});\nconst Mutation = new GraphQLObjectType({\n  name: 'Mutation',\n  description: 'Functions to create things',\n  fields: () => {\n    return {\n      addUser: {\n        type: User,\n        args: {\n          firstName: {\n            type: new GraphQLNonNull(GraphQLString)\n          }\n        },\n\n        resolve(_, args) {\n          return UserModel.create({\n            firstName: args.firstName\n          });\n        }\n\n      }\n    };\n  }\n});\nconst Schema = new GraphQLSchema({\n  query: Query,\n  mutation: Mutation\n});\nmodule.exports = Schema;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjaGVtYS5qcyJdLCJuYW1lcyI6WyJkYiIsInJlcXVpcmUiLCJHcmFwaFFMT2JqZWN0VHlwZSIsIkdyYXBoUUxTdHJpbmciLCJHcmFwaFFMSW50IiwiR3JhcGhRTFNjaGVtYSIsIkdyYXBoUUxMaXN0IiwiR3JhcGhRTE5vbk51bGwiLCJVc2VyIiwibmFtZSIsImRlc2NyaXB0aW9uIiwiZmllbGRzIiwiaWQiLCJ0eXBlIiwicmVzb2x2ZSIsInVzZXIiLCJmaXJzdE5hbWUiLCJRdWVyeSIsInVzZXJzIiwiYXJncyIsInJvb3QiLCJtb2RlbHMiLCJmaW5kQWxsIiwid2hlcmUiLCJNdXRhdGlvbiIsImFkZFVzZXIiLCJfIiwiVXNlck1vZGVsIiwiY3JlYXRlIiwiU2NoZW1hIiwicXVlcnkiLCJtdXRhdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLEVBQUUsR0FBR0MsT0FBTyxDQUFDLGtCQUFELENBQWxCOztBQUVBLE1BQU07QUFBQ0MsRUFBQUEsaUJBQUQ7QUFBb0JDLEVBQUFBLGFBQXBCO0FBQW1DQyxFQUFBQSxVQUFuQztBQUErQ0MsRUFBQUEsYUFBL0M7QUFBOERDLEVBQUFBLFdBQTlEO0FBQTJFQyxFQUFBQTtBQUEzRSxJQUE4Rk4sT0FBTyxDQUFDLFNBQUQsQ0FBM0c7O0FBRUEsTUFBTU8sSUFBSSxHQUFHLElBQUlOLGlCQUFKLENBQXNCO0FBQ2pDTyxFQUFBQSxJQUFJLEVBQUUsTUFEMkI7QUFFakNDLEVBQUFBLFdBQVcsRUFBRSx3QkFGb0I7QUFHakNDLEVBQUFBLE1BQU0sRUFBRSxNQUFNO0FBQ1osV0FBTztBQUNMQyxNQUFBQSxFQUFFLEVBQUU7QUFDRkMsUUFBQUEsSUFBSSxFQUFFVCxVQURKOztBQUVGVSxRQUFBQSxPQUFPLENBQUNDLElBQUQsRUFBTztBQUNaLGlCQUFPQSxJQUFJLENBQUNILEVBQVo7QUFDRDs7QUFKQyxPQURDO0FBT0xJLE1BQUFBLFNBQVMsRUFBRTtBQUNUSCxRQUFBQSxJQUFJLEVBQUVWLGFBREc7O0FBRVRXLFFBQUFBLE9BQU8sQ0FBQ0MsSUFBRCxFQUFPO0FBQ1osaUJBQU9BLElBQUksQ0FBQ0MsU0FBWjtBQUNEOztBQUpRO0FBUE4sS0FBUDtBQWNEO0FBbEJnQyxDQUF0QixDQUFiO0FBcUJBLE1BQU1DLEtBQUssR0FBRyxJQUFJZixpQkFBSixDQUFzQjtBQUNsQ08sRUFBQUEsSUFBSSxFQUFFLE9BRDRCO0FBRWxDQyxFQUFBQSxXQUFXLEVBQUUsc0JBRnFCO0FBR2xDQyxFQUFBQSxNQUFNLEVBQUUsTUFBTTtBQUNaLFdBQU87QUFDTE8sTUFBQUEsS0FBSyxFQUFFO0FBQ0xMLFFBQUFBLElBQUksRUFBRSxJQUFJUCxXQUFKLENBQWdCRSxJQUFoQixDQUREO0FBRUxXLFFBQUFBLElBQUksRUFBRTtBQUNKUCxVQUFBQSxFQUFFLEVBQUU7QUFDRkMsWUFBQUEsSUFBSSxFQUFFVDtBQURKLFdBREE7QUFJSlksVUFBQUEsU0FBUyxFQUFFO0FBQ1RILFlBQUFBLElBQUksRUFBRVY7QUFERztBQUpQLFNBRkQ7O0FBVUw7QUFDQVcsUUFBQUEsT0FBTyxDQUFDTSxJQUFELEVBQU9ELElBQVAsRUFBYTtBQUNsQixpQkFBT25CLEVBQUUsQ0FBQ3FCLE1BQUgsQ0FBVU4sSUFBVixDQUFlTyxPQUFmLENBQXVCO0FBQUVDLFlBQUFBLEtBQUssRUFBRUo7QUFBVCxXQUF2QixDQUFQO0FBQ0Q7O0FBYkk7QUFERixLQUFQO0FBaUJEO0FBckJpQyxDQUF0QixDQUFkO0FBd0JBLE1BQU1LLFFBQVEsR0FBRyxJQUFJdEIsaUJBQUosQ0FBc0I7QUFDckNPLEVBQUFBLElBQUksRUFBRSxVQUQrQjtBQUVyQ0MsRUFBQUEsV0FBVyxFQUFFLDRCQUZ3QjtBQUdyQ0MsRUFBQUEsTUFBTSxFQUFFLE1BQU07QUFDWixXQUFPO0FBQ0xjLE1BQUFBLE9BQU8sRUFBRTtBQUNQWixRQUFBQSxJQUFJLEVBQUVMLElBREM7QUFFUFcsUUFBQUEsSUFBSSxFQUFFO0FBQ0pILFVBQUFBLFNBQVMsRUFBRTtBQUNUSCxZQUFBQSxJQUFJLEVBQUUsSUFBSU4sY0FBSixDQUFtQkosYUFBbkI7QUFERztBQURQLFNBRkM7O0FBT1BXLFFBQUFBLE9BQU8sQ0FBQ1ksQ0FBRCxFQUFJUCxJQUFKLEVBQVU7QUFDZixpQkFBT1EsU0FBUyxDQUFDQyxNQUFWLENBQWlCO0FBQ3RCWixZQUFBQSxTQUFTLEVBQUVHLElBQUksQ0FBQ0g7QUFETSxXQUFqQixDQUFQO0FBR0Q7O0FBWE07QUFESixLQUFQO0FBZUQ7QUFuQm9DLENBQXRCLENBQWpCO0FBc0JBLE1BQU1hLE1BQU0sR0FBRyxJQUFJeEIsYUFBSixDQUFrQjtBQUMvQnlCLEVBQUFBLEtBQUssRUFBRWIsS0FEd0I7QUFFL0JjLEVBQUFBLFFBQVEsRUFBRVA7QUFGcUIsQ0FBbEIsQ0FBZjtBQUtBUSxNQUFNLENBQUNDLE9BQVAsR0FBaUJKLE1BQWpCIiwic291cmNlUm9vdCI6Ii9ob21lL3Njb3JwL2dpdC9hcHB3b3JrL2FwcDIvZGF0YWJhc2Uvc2NoZW1hLyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGRiID0gcmVxdWlyZSgnLi4vbW9kZWxzL21vZGVscycpXG5cbmNvbnN0IHtHcmFwaFFMT2JqZWN0VHlwZSwgR3JhcGhRTFN0cmluZywgR3JhcGhRTEludCwgR3JhcGhRTFNjaGVtYSwgR3JhcGhRTExpc3QsIEdyYXBoUUxOb25OdWxsIH0gPSByZXF1aXJlKCdncmFwaHFsJylcblxuY29uc3QgVXNlciA9IG5ldyBHcmFwaFFMT2JqZWN0VHlwZSh7XG4gIG5hbWU6ICdVc2VyJyxcbiAgZGVzY3JpcHRpb246ICd0aGlzIHJlcHJlc2VudHMgYSB1c2VyJyxcbiAgZmllbGRzOiAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiB7XG4gICAgICAgIHR5cGU6IEdyYXBoUUxJbnQsXG4gICAgICAgIHJlc29sdmUodXNlcikge1xuICAgICAgICAgIHJldHVybiB1c2VyLmlkXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBmaXJzdE5hbWU6IHtcbiAgICAgICAgdHlwZTogR3JhcGhRTFN0cmluZyxcbiAgICAgICAgcmVzb2x2ZSh1c2VyKSB7XG4gICAgICAgICAgcmV0dXJuIHVzZXIuZmlyc3ROYW1lXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pXG5cbmNvbnN0IFF1ZXJ5ID0gbmV3IEdyYXBoUUxPYmplY3RUeXBlKHtcbiAgbmFtZTogJ1F1ZXJ5JyxcbiAgZGVzY3JpcHRpb246ICd0aGlzIGlzIGEgcm9vdCBxdWVyeScsXG4gIGZpZWxkczogKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB1c2Vyczoge1xuICAgICAgICB0eXBlOiBuZXcgR3JhcGhRTExpc3QoVXNlciksXG4gICAgICAgIGFyZ3M6IHtcbiAgICAgICAgICBpZDoge1xuICAgICAgICAgICAgdHlwZTogR3JhcGhRTEludFxuICAgICAgICAgIH0sXG4gICAgICAgICAgZmlyc3ROYW1lOiB7XG4gICAgICAgICAgICB0eXBlOiBHcmFwaFFMU3RyaW5nXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAvL3ZhbGlkYXRpb25zIGNhbiBnbyBoZXJlXG4gICAgICAgIHJlc29sdmUocm9vdCwgYXJncykge1xuICAgICAgICAgIHJldHVybiBkYi5tb2RlbHMudXNlci5maW5kQWxsKHsgd2hlcmU6IGFyZ3MgfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufSlcblxuY29uc3QgTXV0YXRpb24gPSBuZXcgR3JhcGhRTE9iamVjdFR5cGUoe1xuICBuYW1lOiAnTXV0YXRpb24nLFxuICBkZXNjcmlwdGlvbjogJ0Z1bmN0aW9ucyB0byBjcmVhdGUgdGhpbmdzJyxcbiAgZmllbGRzOiAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFkZFVzZXI6IHtcbiAgICAgICAgdHlwZTogVXNlcixcbiAgICAgICAgYXJnczoge1xuICAgICAgICAgIGZpcnN0TmFtZToge1xuICAgICAgICAgICAgdHlwZTogbmV3IEdyYXBoUUxOb25OdWxsKEdyYXBoUUxTdHJpbmcpXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZXNvbHZlKF8sIGFyZ3MpIHtcbiAgICAgICAgICByZXR1cm4gVXNlck1vZGVsLmNyZWF0ZSh7XG4gICAgICAgICAgICBmaXJzdE5hbWU6IGFyZ3MuZmlyc3ROYW1lXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufSlcblxuY29uc3QgU2NoZW1hID0gbmV3IEdyYXBoUUxTY2hlbWEoe1xuICBxdWVyeTogUXVlcnksXG4gIG11dGF0aW9uOiBNdXRhdGlvblxufSlcblxubW9kdWxlLmV4cG9ydHMgPSBTY2hlbWFcbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "schema.js"
      ],
      "names": [
        "db",
        "require",
        "GraphQLObjectType",
        "GraphQLString",
        "GraphQLInt",
        "GraphQLSchema",
        "GraphQLList",
        "GraphQLNonNull",
        "User",
        "name",
        "description",
        "fields",
        "id",
        "type",
        "resolve",
        "user",
        "firstName",
        "Query",
        "users",
        "args",
        "root",
        "models",
        "findAll",
        "where",
        "Mutation",
        "addUser",
        "_",
        "UserModel",
        "create",
        "Schema",
        "query",
        "mutation",
        "module",
        "exports"
      ],
      "mappings": "AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,kBAAD,CAAlB;;AAEA,MAAM;AAACC,EAAAA,iBAAD;AAAoBC,EAAAA,aAApB;AAAmCC,EAAAA,UAAnC;AAA+CC,EAAAA,aAA/C;AAA8DC,EAAAA,WAA9D;AAA2EC,EAAAA;AAA3E,IAA8FN,OAAO,CAAC,SAAD,CAA3G;;AAEA,MAAMO,IAAI,GAAG,IAAIN,iBAAJ,CAAsB;AACjCO,EAAAA,IAAI,EAAE,MAD2B;AAEjCC,EAAAA,WAAW,EAAE,wBAFoB;AAGjCC,EAAAA,MAAM,EAAE,MAAM;AACZ,WAAO;AACLC,MAAAA,EAAE,EAAE;AACFC,QAAAA,IAAI,EAAET,UADJ;;AAEFU,QAAAA,OAAO,CAACC,IAAD,EAAO;AACZ,iBAAOA,IAAI,CAACH,EAAZ;AACD;;AAJC,OADC;AAOLI,MAAAA,SAAS,EAAE;AACTH,QAAAA,IAAI,EAAEV,aADG;;AAETW,QAAAA,OAAO,CAACC,IAAD,EAAO;AACZ,iBAAOA,IAAI,CAACC,SAAZ;AACD;;AAJQ;AAPN,KAAP;AAcD;AAlBgC,CAAtB,CAAb;AAqBA,MAAMC,KAAK,GAAG,IAAIf,iBAAJ,CAAsB;AAClCO,EAAAA,IAAI,EAAE,OAD4B;AAElCC,EAAAA,WAAW,EAAE,sBAFqB;AAGlCC,EAAAA,MAAM,EAAE,MAAM;AACZ,WAAO;AACLO,MAAAA,KAAK,EAAE;AACLL,QAAAA,IAAI,EAAE,IAAIP,WAAJ,CAAgBE,IAAhB,CADD;AAELW,QAAAA,IAAI,EAAE;AACJP,UAAAA,EAAE,EAAE;AACFC,YAAAA,IAAI,EAAET;AADJ,WADA;AAIJY,UAAAA,SAAS,EAAE;AACTH,YAAAA,IAAI,EAAEV;AADG;AAJP,SAFD;;AAUL;AACAW,QAAAA,OAAO,CAACM,IAAD,EAAOD,IAAP,EAAa;AAClB,iBAAOnB,EAAE,CAACqB,MAAH,CAAUN,IAAV,CAAeO,OAAf,CAAuB;AAAEC,YAAAA,KAAK,EAAEJ;AAAT,WAAvB,CAAP;AACD;;AAbI;AADF,KAAP;AAiBD;AArBiC,CAAtB,CAAd;AAwBA,MAAMK,QAAQ,GAAG,IAAItB,iBAAJ,CAAsB;AACrCO,EAAAA,IAAI,EAAE,UAD+B;AAErCC,EAAAA,WAAW,EAAE,4BAFwB;AAGrCC,EAAAA,MAAM,EAAE,MAAM;AACZ,WAAO;AACLc,MAAAA,OAAO,EAAE;AACPZ,QAAAA,IAAI,EAAEL,IADC;AAEPW,QAAAA,IAAI,EAAE;AACJH,UAAAA,SAAS,EAAE;AACTH,YAAAA,IAAI,EAAE,IAAIN,cAAJ,CAAmBJ,aAAnB;AADG;AADP,SAFC;;AAOPW,QAAAA,OAAO,CAACY,CAAD,EAAIP,IAAJ,EAAU;AACf,iBAAOQ,SAAS,CAACC,MAAV,CAAiB;AACtBZ,YAAAA,SAAS,EAAEG,IAAI,CAACH;AADM,WAAjB,CAAP;AAGD;;AAXM;AADJ,KAAP;AAeD;AAnBoC,CAAtB,CAAjB;AAsBA,MAAMa,MAAM,GAAG,IAAIxB,aAAJ,CAAkB;AAC/ByB,EAAAA,KAAK,EAAEb,KADwB;AAE/Bc,EAAAA,QAAQ,EAAEP;AAFqB,CAAlB,CAAf;AAKAQ,MAAM,CAACC,OAAP,GAAiBJ,MAAjB",
      "sourceRoot": "/home/scorp/git/appwork/app2/database/schema/",
      "sourcesContent": [
        "const db = require('../models/models')\n\nconst {GraphQLObjectType, GraphQLString, GraphQLInt, GraphQLSchema, GraphQLList, GraphQLNonNull } = require('graphql')\n\nconst User = new GraphQLObjectType({\n  name: 'User',\n  description: 'this represents a user',\n  fields: () => {\n    return {\n      id: {\n        type: GraphQLInt,\n        resolve(user) {\n          return user.id\n        }\n      },\n      firstName: {\n        type: GraphQLString,\n        resolve(user) {\n          return user.firstName\n        }\n      }\n    }\n  }\n})\n\nconst Query = new GraphQLObjectType({\n  name: 'Query',\n  description: 'this is a root query',\n  fields: () => {\n    return {\n      users: {\n        type: new GraphQLList(User),\n        args: {\n          id: {\n            type: GraphQLInt\n          },\n          firstName: {\n            type: GraphQLString\n          }\n        },\n        //validations can go here\n        resolve(root, args) {\n          return db.models.user.findAll({ where: args })\n        }\n      }\n    }\n  }\n})\n\nconst Mutation = new GraphQLObjectType({\n  name: 'Mutation',\n  description: 'Functions to create things',\n  fields: () => {\n    return {\n      addUser: {\n        type: User,\n        args: {\n          firstName: {\n            type: new GraphQLNonNull(GraphQLString)\n          }\n        },\n        resolve(_, args) {\n          return UserModel.create({\n            firstName: args.firstName\n          })\n        }\n      }\n    }\n  }\n})\n\nconst Schema = new GraphQLSchema({\n  query: Query,\n  mutation: Mutation\n})\n\nmodule.exports = Schema\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1633838585559
  },
  "{\"assumptions\":{},\"sourceRoot\":\"/home/scorp/git/appwork/app2/database/models/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/scorp/git/appwork/app2\",\"filename\":\"/home/scorp/git/appwork/app2/database/models/models.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/scorp/git/appwork/app2\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.15.8": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "/home/scorp/git/appwork/app2/database/models/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/home/scorp/git/appwork/app2",
      "filename": "/home/scorp/git/appwork/app2/database/models/models.js",
      "targets": {},
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "browserslistConfigFile": false,
      "envName": "development",
      "root": "/home/scorp/git/appwork/app2",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/scorp/git/appwork/app2/database/models/models.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/home/scorp/git/appwork/app2/database/models/models.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/scorp/git/appwork/app2/database/models/",
        "sourceFileName": "models.js"
      }
    },
    "ast": null,
    "code": "const Sequelize = require('sequelize');\n\nconst sequelize = new Sequelize('postgres://localhost:5432/medium');\nconst User = sequelize.define('user', {\n  // attributes\n  firstName: {\n    type: Sequelize.STRING,\n    allowNull: false\n  }\n});\nsequelize.sync({\n  force: true\n}).then(() => {\n  return User.create({\n    firstName: 'Dons'\n  });\n});\nmodule.export = sequelize;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZGVscy5qcyJdLCJuYW1lcyI6WyJTZXF1ZWxpemUiLCJyZXF1aXJlIiwic2VxdWVsaXplIiwiVXNlciIsImRlZmluZSIsImZpcnN0TmFtZSIsInR5cGUiLCJTVFJJTkciLCJhbGxvd051bGwiLCJzeW5jIiwiZm9yY2UiLCJ0aGVuIiwiY3JlYXRlIiwibW9kdWxlIiwiZXhwb3J0Il0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxTQUFTLEdBQUdDLE9BQU8sQ0FBQyxXQUFELENBQXpCOztBQUNBLE1BQU1DLFNBQVMsR0FBRyxJQUFJRixTQUFKLENBQWMsa0NBQWQsQ0FBbEI7QUFHQSxNQUFNRyxJQUFJLEdBQUdELFNBQVMsQ0FBQ0UsTUFBVixDQUFpQixNQUFqQixFQUF5QjtBQUNwQztBQUNBQyxFQUFBQSxTQUFTLEVBQUU7QUFDVEMsSUFBQUEsSUFBSSxFQUFFTixTQUFTLENBQUNPLE1BRFA7QUFFVEMsSUFBQUEsU0FBUyxFQUFFO0FBRkY7QUFGeUIsQ0FBekIsQ0FBYjtBQVFBTixTQUFTLENBQUNPLElBQVYsQ0FBZTtBQUFFQyxFQUFBQSxLQUFLLEVBQUU7QUFBVCxDQUFmLEVBQWdDQyxJQUFoQyxDQUFxQyxNQUFNO0FBQ3pDLFNBQU9SLElBQUksQ0FBQ1MsTUFBTCxDQUFZO0FBQ2pCUCxJQUFBQSxTQUFTLEVBQUU7QUFETSxHQUFaLENBQVA7QUFHRCxDQUpEO0FBT0FRLE1BQU0sQ0FBQ0MsTUFBUCxHQUFnQlosU0FBaEIiLCJzb3VyY2VSb290IjoiL2hvbWUvc2NvcnAvZ2l0L2FwcHdvcmsvYXBwMi9kYXRhYmFzZS9tb2RlbHMvIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgU2VxdWVsaXplID0gcmVxdWlyZSgnc2VxdWVsaXplJylcbmNvbnN0IHNlcXVlbGl6ZSA9IG5ldyBTZXF1ZWxpemUoJ3Bvc3RncmVzOi8vbG9jYWxob3N0OjU0MzIvbWVkaXVtJylcblxuXG5jb25zdCBVc2VyID0gc2VxdWVsaXplLmRlZmluZSgndXNlcicsIHtcbiAgLy8gYXR0cmlidXRlc1xuICBmaXJzdE5hbWU6IHtcbiAgICB0eXBlOiBTZXF1ZWxpemUuU1RSSU5HLFxuICAgIGFsbG93TnVsbDogZmFsc2VcbiAgfVxufSlcblxuc2VxdWVsaXplLnN5bmMoeyBmb3JjZTogdHJ1ZSB9KS50aGVuKCgpID0+IHtcbiAgcmV0dXJuIFVzZXIuY3JlYXRlKHtcbiAgICBmaXJzdE5hbWU6ICdEb25zJ1xuICB9KVxufSlcblxuXG5tb2R1bGUuZXhwb3J0ID0gc2VxdWVsaXplO1xuIl19",
    "map": {
      "version": 3,
      "sources": [
        "models.js"
      ],
      "names": [
        "Sequelize",
        "require",
        "sequelize",
        "User",
        "define",
        "firstName",
        "type",
        "STRING",
        "allowNull",
        "sync",
        "force",
        "then",
        "create",
        "module",
        "export"
      ],
      "mappings": "AAAA,MAAMA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMC,SAAS,GAAG,IAAIF,SAAJ,CAAc,kCAAd,CAAlB;AAGA,MAAMG,IAAI,GAAGD,SAAS,CAACE,MAAV,CAAiB,MAAjB,EAAyB;AACpC;AACAC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAEN,SAAS,CAACO,MADP;AAETC,IAAAA,SAAS,EAAE;AAFF;AAFyB,CAAzB,CAAb;AAQAN,SAAS,CAACO,IAAV,CAAe;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAAf,EAAgCC,IAAhC,CAAqC,MAAM;AACzC,SAAOR,IAAI,CAACS,MAAL,CAAY;AACjBP,IAAAA,SAAS,EAAE;AADM,GAAZ,CAAP;AAGD,CAJD;AAOAQ,MAAM,CAACC,MAAP,GAAgBZ,SAAhB",
      "sourceRoot": "/home/scorp/git/appwork/app2/database/models/",
      "sourcesContent": [
        "const Sequelize = require('sequelize')\nconst sequelize = new Sequelize('postgres://localhost:5432/medium')\n\n\nconst User = sequelize.define('user', {\n  // attributes\n  firstName: {\n    type: Sequelize.STRING,\n    allowNull: false\n  }\n})\n\nsequelize.sync({ force: true }).then(() => {\n  return User.create({\n    firstName: 'Dons'\n  })\n})\n\n\nmodule.export = sequelize;\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1633888891550
  },
  "{\"assumptions\":{},\"sourceRoot\":\"/home/scorp/git/appwork/silver-adventure/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/scorp/git/appwork/silver-adventure\",\"filename\":\"/home/scorp/git/appwork/silver-adventure/index.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/scorp/git/appwork/silver-adventure\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.15.8": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "/home/scorp/git/appwork/silver-adventure/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/home/scorp/git/appwork/silver-adventure",
      "filename": "/home/scorp/git/appwork/silver-adventure/index.js",
      "targets": {},
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "browserslistConfigFile": false,
      "envName": "development",
      "root": "/home/scorp/git/appwork/silver-adventure",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/scorp/git/appwork/silver-adventure/index.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/home/scorp/git/appwork/silver-adventure/index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/scorp/git/appwork/silver-adventure/",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "const express = require('express');\n\nconst {\n  graphqlHTTP\n} = require('express-graphql');\n\nconst Schema = require('./database/schema/schema');\n\nconst app = express();\nconst port = 3000;\napp.use('/graphql', graphqlHTTP({\n  schema: Schema,\n  graphql: true\n}));\napp.get('/', (req, res) => {\n  res.send('Hello World!');\n});\napp.listen(port, () => {\n  console.log('Example app listening at https://localhost:${port}');\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImV4cHJlc3MiLCJyZXF1aXJlIiwiZ3JhcGhxbEhUVFAiLCJTY2hlbWEiLCJhcHAiLCJwb3J0IiwidXNlIiwic2NoZW1hIiwiZ3JhcGhxbCIsImdldCIsInJlcSIsInJlcyIsInNlbmQiLCJsaXN0ZW4iLCJjb25zb2xlIiwibG9nIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxTQUFELENBQXZCOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUFrQkQsT0FBTyxDQUFDLGlCQUFELENBQS9COztBQUNBLE1BQU1FLE1BQU0sR0FBR0YsT0FBTyxDQUFDLDBCQUFELENBQXRCOztBQUVBLE1BQU1HLEdBQUcsR0FBR0osT0FBTyxFQUFuQjtBQUNBLE1BQU1LLElBQUksR0FBRyxJQUFiO0FBRUFELEdBQUcsQ0FBQ0UsR0FBSixDQUFRLFVBQVIsRUFBb0JKLFdBQVcsQ0FBQztBQUFFSyxFQUFBQSxNQUFNLEVBQUVKLE1BQVY7QUFBa0JLLEVBQUFBLE9BQU8sRUFBRTtBQUEzQixDQUFELENBQS9CO0FBRUFKLEdBQUcsQ0FBQ0ssR0FBSixDQUFRLEdBQVIsRUFBYSxDQUFDQyxHQUFELEVBQU1DLEdBQU4sS0FBYztBQUN6QkEsRUFBQUEsR0FBRyxDQUFDQyxJQUFKLENBQVMsY0FBVDtBQUNELENBRkQ7QUFJQVIsR0FBRyxDQUFDUyxNQUFKLENBQVdSLElBQVgsRUFBaUIsTUFBTTtBQUNyQlMsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksb0RBQVo7QUFDRCxDQUZEIiwic291cmNlUm9vdCI6Ii9ob21lL3Njb3JwL2dpdC9hcHB3b3JrL3NpbHZlci1hZHZlbnR1cmUvIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKVxuY29uc3QgeyBncmFwaHFsSFRUUCB9ID0gcmVxdWlyZSgnZXhwcmVzcy1ncmFwaHFsJylcbmNvbnN0IFNjaGVtYSA9IHJlcXVpcmUoJy4vZGF0YWJhc2Uvc2NoZW1hL3NjaGVtYScpXG5cbmNvbnN0IGFwcCA9IGV4cHJlc3MoKVxuY29uc3QgcG9ydCA9IDMwMDBcblxuYXBwLnVzZSgnL2dyYXBocWwnLCBncmFwaHFsSFRUUCh7IHNjaGVtYTogU2NoZW1hLCBncmFwaHFsOiB0cnVlIH0pKVxuXG5hcHAuZ2V0KCcvJywgKHJlcSwgcmVzKSA9PiB7XG4gIHJlcy5zZW5kKCdIZWxsbyBXb3JsZCEnKVxufSlcblxuYXBwLmxpc3Rlbihwb3J0LCAoKSA9PiB7XG4gIGNvbnNvbGUubG9nKCdFeGFtcGxlIGFwcCBsaXN0ZW5pbmcgYXQgaHR0cHM6Ly9sb2NhbGhvc3Q6JHtwb3J0fScpXG59KVxuXG5cbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "express",
        "require",
        "graphqlHTTP",
        "Schema",
        "app",
        "port",
        "use",
        "schema",
        "graphql",
        "get",
        "req",
        "res",
        "send",
        "listen",
        "console",
        "log"
      ],
      "mappings": "AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAkBD,OAAO,CAAC,iBAAD,CAA/B;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,0BAAD,CAAtB;;AAEA,MAAMG,GAAG,GAAGJ,OAAO,EAAnB;AACA,MAAMK,IAAI,GAAG,IAAb;AAEAD,GAAG,CAACE,GAAJ,CAAQ,UAAR,EAAoBJ,WAAW,CAAC;AAAEK,EAAAA,MAAM,EAAEJ,MAAV;AAAkBK,EAAAA,OAAO,EAAE;AAA3B,CAAD,CAA/B;AAEAJ,GAAG,CAACK,GAAJ,CAAQ,GAAR,EAAa,CAACC,GAAD,EAAMC,GAAN,KAAc;AACzBA,EAAAA,GAAG,CAACC,IAAJ,CAAS,cAAT;AACD,CAFD;AAIAR,GAAG,CAACS,MAAJ,CAAWR,IAAX,EAAiB,MAAM;AACrBS,EAAAA,OAAO,CAACC,GAAR,CAAY,oDAAZ;AACD,CAFD",
      "sourceRoot": "/home/scorp/git/appwork/silver-adventure/",
      "sourcesContent": [
        "const express = require('express')\nconst { graphqlHTTP } = require('express-graphql')\nconst Schema = require('./database/schema/schema')\n\nconst app = express()\nconst port = 3000\n\napp.use('/graphql', graphqlHTTP({ schema: Schema, graphql: true }))\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(port, () => {\n  console.log('Example app listening at https://localhost:${port}')\n})\n\n\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1633904855759
  },
  "{\"assumptions\":{},\"sourceRoot\":\"/home/scorp/git/appwork/silver-adventure/database/schema/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/scorp/git/appwork/silver-adventure\",\"filename\":\"/home/scorp/git/appwork/silver-adventure/database/schema/schema.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/scorp/git/appwork/silver-adventure\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.15.8": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "/home/scorp/git/appwork/silver-adventure/database/schema/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/home/scorp/git/appwork/silver-adventure",
      "filename": "/home/scorp/git/appwork/silver-adventure/database/schema/schema.js",
      "targets": {},
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "browserslistConfigFile": false,
      "envName": "development",
      "root": "/home/scorp/git/appwork/silver-adventure",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/scorp/git/appwork/silver-adventure/database/schema/schema.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/home/scorp/git/appwork/silver-adventure/database/schema/schema.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/scorp/git/appwork/silver-adventure/database/schema/",
        "sourceFileName": "schema.js"
      }
    },
    "ast": null,
    "code": "const db = require('../models/models');\n\nconst {\n  GraphQLObjectType,\n  GraphQLString,\n  GraphQLInt,\n  GraphQLSchema,\n  GraphQLList,\n  GraphQLNonNull\n} = require('graphql');\n\nconst User = new GraphQLObjectType({\n  name: 'User',\n  description: 'this represents a user',\n  fields: () => {\n    return {\n      id: {\n        type: GraphQLInt,\n\n        resolve(user) {\n          return user.id;\n        }\n\n      },\n      firstName: {\n        type: GraphQLString,\n\n        resolve(user) {\n          return user.firstName;\n        }\n\n      }\n    };\n  }\n});\nconst Query = new GraphQLObjectType({\n  name: 'Query',\n  description: 'this is a root query',\n  fields: () => {\n    return {\n      users: {\n        type: new GraphQLList(User),\n        args: {\n          id: {\n            type: GraphQLInt\n          },\n          firstName: {\n            type: GraphQLString\n          }\n        },\n\n        //validations can go here\n        resolve(root, args) {\n          return db.models.user.findAll({\n            where: args\n          });\n        }\n\n      }\n    };\n  }\n});\nconst Mutation = new GraphQLObjectType({\n  name: 'Mutation',\n  description: 'Functions to create things',\n  fields: () => {\n    return {\n      addUser: {\n        type: User,\n        args: {\n          firstName: {\n            type: new GraphQLNonNull(GraphQLString)\n          }\n        },\n\n        resolve(_, args) {\n          return db.models.user.create({\n            firstName: args.firstName\n          });\n        }\n\n      }\n    };\n  }\n});\nconst Schema = new GraphQLSchema({\n  query: Query,\n  mutation: Mutation\n});\nmodule.exports = Schema;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjaGVtYS5qcyJdLCJuYW1lcyI6WyJkYiIsInJlcXVpcmUiLCJHcmFwaFFMT2JqZWN0VHlwZSIsIkdyYXBoUUxTdHJpbmciLCJHcmFwaFFMSW50IiwiR3JhcGhRTFNjaGVtYSIsIkdyYXBoUUxMaXN0IiwiR3JhcGhRTE5vbk51bGwiLCJVc2VyIiwibmFtZSIsImRlc2NyaXB0aW9uIiwiZmllbGRzIiwiaWQiLCJ0eXBlIiwicmVzb2x2ZSIsInVzZXIiLCJmaXJzdE5hbWUiLCJRdWVyeSIsInVzZXJzIiwiYXJncyIsInJvb3QiLCJtb2RlbHMiLCJmaW5kQWxsIiwid2hlcmUiLCJNdXRhdGlvbiIsImFkZFVzZXIiLCJfIiwiY3JlYXRlIiwiU2NoZW1hIiwicXVlcnkiLCJtdXRhdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLEVBQUUsR0FBR0MsT0FBTyxDQUFDLGtCQUFELENBQWxCOztBQUVBLE1BQU07QUFBQ0MsRUFBQUEsaUJBQUQ7QUFBb0JDLEVBQUFBLGFBQXBCO0FBQW1DQyxFQUFBQSxVQUFuQztBQUErQ0MsRUFBQUEsYUFBL0M7QUFBOERDLEVBQUFBLFdBQTlEO0FBQTJFQyxFQUFBQTtBQUEzRSxJQUE4Rk4sT0FBTyxDQUFDLFNBQUQsQ0FBM0c7O0FBRUEsTUFBTU8sSUFBSSxHQUFHLElBQUlOLGlCQUFKLENBQXNCO0FBQ2pDTyxFQUFBQSxJQUFJLEVBQUUsTUFEMkI7QUFFakNDLEVBQUFBLFdBQVcsRUFBRSx3QkFGb0I7QUFHakNDLEVBQUFBLE1BQU0sRUFBRSxNQUFNO0FBQ1osV0FBTztBQUNMQyxNQUFBQSxFQUFFLEVBQUU7QUFDRkMsUUFBQUEsSUFBSSxFQUFFVCxVQURKOztBQUVGVSxRQUFBQSxPQUFPLENBQUNDLElBQUQsRUFBTztBQUNaLGlCQUFPQSxJQUFJLENBQUNILEVBQVo7QUFDRDs7QUFKQyxPQURDO0FBT0xJLE1BQUFBLFNBQVMsRUFBRTtBQUNUSCxRQUFBQSxJQUFJLEVBQUVWLGFBREc7O0FBRVRXLFFBQUFBLE9BQU8sQ0FBQ0MsSUFBRCxFQUFPO0FBQ1osaUJBQU9BLElBQUksQ0FBQ0MsU0FBWjtBQUNEOztBQUpRO0FBUE4sS0FBUDtBQWNEO0FBbEJnQyxDQUF0QixDQUFiO0FBcUJBLE1BQU1DLEtBQUssR0FBRyxJQUFJZixpQkFBSixDQUFzQjtBQUNsQ08sRUFBQUEsSUFBSSxFQUFFLE9BRDRCO0FBRWxDQyxFQUFBQSxXQUFXLEVBQUUsc0JBRnFCO0FBR2xDQyxFQUFBQSxNQUFNLEVBQUUsTUFBTTtBQUNaLFdBQU87QUFDTE8sTUFBQUEsS0FBSyxFQUFFO0FBQ0xMLFFBQUFBLElBQUksRUFBRSxJQUFJUCxXQUFKLENBQWdCRSxJQUFoQixDQUREO0FBRUxXLFFBQUFBLElBQUksRUFBRTtBQUNKUCxVQUFBQSxFQUFFLEVBQUU7QUFDRkMsWUFBQUEsSUFBSSxFQUFFVDtBQURKLFdBREE7QUFJSlksVUFBQUEsU0FBUyxFQUFFO0FBQ1RILFlBQUFBLElBQUksRUFBRVY7QUFERztBQUpQLFNBRkQ7O0FBVUw7QUFDQVcsUUFBQUEsT0FBTyxDQUFDTSxJQUFELEVBQU9ELElBQVAsRUFBYTtBQUNsQixpQkFBT25CLEVBQUUsQ0FBQ3FCLE1BQUgsQ0FBVU4sSUFBVixDQUFlTyxPQUFmLENBQXVCO0FBQUVDLFlBQUFBLEtBQUssRUFBRUo7QUFBVCxXQUF2QixDQUFQO0FBQ0Q7O0FBYkk7QUFERixLQUFQO0FBaUJEO0FBckJpQyxDQUF0QixDQUFkO0FBd0JBLE1BQU1LLFFBQVEsR0FBRyxJQUFJdEIsaUJBQUosQ0FBc0I7QUFDckNPLEVBQUFBLElBQUksRUFBRSxVQUQrQjtBQUVyQ0MsRUFBQUEsV0FBVyxFQUFFLDRCQUZ3QjtBQUdyQ0MsRUFBQUEsTUFBTSxFQUFFLE1BQU07QUFDWixXQUFPO0FBQ0xjLE1BQUFBLE9BQU8sRUFBRTtBQUNQWixRQUFBQSxJQUFJLEVBQUVMLElBREM7QUFFUFcsUUFBQUEsSUFBSSxFQUFFO0FBQ0pILFVBQUFBLFNBQVMsRUFBRTtBQUNUSCxZQUFBQSxJQUFJLEVBQUUsSUFBSU4sY0FBSixDQUFtQkosYUFBbkI7QUFERztBQURQLFNBRkM7O0FBT1BXLFFBQUFBLE9BQU8sQ0FBQ1ksQ0FBRCxFQUFJUCxJQUFKLEVBQVU7QUFDZixpQkFBT25CLEVBQUUsQ0FBQ3FCLE1BQUgsQ0FBVU4sSUFBVixDQUFlWSxNQUFmLENBQXNCO0FBQzNCWCxZQUFBQSxTQUFTLEVBQUVHLElBQUksQ0FBQ0g7QUFEVyxXQUF0QixDQUFQO0FBR0Q7O0FBWE07QUFESixLQUFQO0FBZUQ7QUFuQm9DLENBQXRCLENBQWpCO0FBc0JBLE1BQU1ZLE1BQU0sR0FBRyxJQUFJdkIsYUFBSixDQUFrQjtBQUMvQndCLEVBQUFBLEtBQUssRUFBRVosS0FEd0I7QUFFL0JhLEVBQUFBLFFBQVEsRUFBRU47QUFGcUIsQ0FBbEIsQ0FBZjtBQUtBTyxNQUFNLENBQUNDLE9BQVAsR0FBaUJKLE1BQWpCIiwic291cmNlUm9vdCI6Ii9ob21lL3Njb3JwL2dpdC9hcHB3b3JrL3NpbHZlci1hZHZlbnR1cmUvZGF0YWJhc2Uvc2NoZW1hLyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGRiID0gcmVxdWlyZSgnLi4vbW9kZWxzL21vZGVscycpXG5cbmNvbnN0IHtHcmFwaFFMT2JqZWN0VHlwZSwgR3JhcGhRTFN0cmluZywgR3JhcGhRTEludCwgR3JhcGhRTFNjaGVtYSwgR3JhcGhRTExpc3QsIEdyYXBoUUxOb25OdWxsIH0gPSByZXF1aXJlKCdncmFwaHFsJylcblxuY29uc3QgVXNlciA9IG5ldyBHcmFwaFFMT2JqZWN0VHlwZSh7XG4gIG5hbWU6ICdVc2VyJyxcbiAgZGVzY3JpcHRpb246ICd0aGlzIHJlcHJlc2VudHMgYSB1c2VyJyxcbiAgZmllbGRzOiAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiB7XG4gICAgICAgIHR5cGU6IEdyYXBoUUxJbnQsXG4gICAgICAgIHJlc29sdmUodXNlcikge1xuICAgICAgICAgIHJldHVybiB1c2VyLmlkXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBmaXJzdE5hbWU6IHtcbiAgICAgICAgdHlwZTogR3JhcGhRTFN0cmluZyxcbiAgICAgICAgcmVzb2x2ZSh1c2VyKSB7XG4gICAgICAgICAgcmV0dXJuIHVzZXIuZmlyc3ROYW1lXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pXG5cbmNvbnN0IFF1ZXJ5ID0gbmV3IEdyYXBoUUxPYmplY3RUeXBlKHtcbiAgbmFtZTogJ1F1ZXJ5JyxcbiAgZGVzY3JpcHRpb246ICd0aGlzIGlzIGEgcm9vdCBxdWVyeScsXG4gIGZpZWxkczogKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB1c2Vyczoge1xuICAgICAgICB0eXBlOiBuZXcgR3JhcGhRTExpc3QoVXNlciksXG4gICAgICAgIGFyZ3M6IHtcbiAgICAgICAgICBpZDoge1xuICAgICAgICAgICAgdHlwZTogR3JhcGhRTEludFxuICAgICAgICAgIH0sXG4gICAgICAgICAgZmlyc3ROYW1lOiB7XG4gICAgICAgICAgICB0eXBlOiBHcmFwaFFMU3RyaW5nXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAvL3ZhbGlkYXRpb25zIGNhbiBnbyBoZXJlXG4gICAgICAgIHJlc29sdmUocm9vdCwgYXJncykge1xuICAgICAgICAgIHJldHVybiBkYi5tb2RlbHMudXNlci5maW5kQWxsKHsgd2hlcmU6IGFyZ3MgfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufSlcblxuY29uc3QgTXV0YXRpb24gPSBuZXcgR3JhcGhRTE9iamVjdFR5cGUoe1xuICBuYW1lOiAnTXV0YXRpb24nLFxuICBkZXNjcmlwdGlvbjogJ0Z1bmN0aW9ucyB0byBjcmVhdGUgdGhpbmdzJyxcbiAgZmllbGRzOiAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFkZFVzZXI6IHtcbiAgICAgICAgdHlwZTogVXNlcixcbiAgICAgICAgYXJnczoge1xuICAgICAgICAgIGZpcnN0TmFtZToge1xuICAgICAgICAgICAgdHlwZTogbmV3IEdyYXBoUUxOb25OdWxsKEdyYXBoUUxTdHJpbmcpXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZXNvbHZlKF8sIGFyZ3MpIHtcbiAgICAgICAgICByZXR1cm4gZGIubW9kZWxzLnVzZXIuY3JlYXRlKHtcbiAgICAgICAgICAgIGZpcnN0TmFtZTogYXJncy5maXJzdE5hbWVcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59KVxuXG5jb25zdCBTY2hlbWEgPSBuZXcgR3JhcGhRTFNjaGVtYSh7XG4gIHF1ZXJ5OiBRdWVyeSxcbiAgbXV0YXRpb246IE11dGF0aW9uXG59KVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNjaGVtYVxuIl19",
    "map": {
      "version": 3,
      "sources": [
        "schema.js"
      ],
      "names": [
        "db",
        "require",
        "GraphQLObjectType",
        "GraphQLString",
        "GraphQLInt",
        "GraphQLSchema",
        "GraphQLList",
        "GraphQLNonNull",
        "User",
        "name",
        "description",
        "fields",
        "id",
        "type",
        "resolve",
        "user",
        "firstName",
        "Query",
        "users",
        "args",
        "root",
        "models",
        "findAll",
        "where",
        "Mutation",
        "addUser",
        "_",
        "create",
        "Schema",
        "query",
        "mutation",
        "module",
        "exports"
      ],
      "mappings": "AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,kBAAD,CAAlB;;AAEA,MAAM;AAACC,EAAAA,iBAAD;AAAoBC,EAAAA,aAApB;AAAmCC,EAAAA,UAAnC;AAA+CC,EAAAA,aAA/C;AAA8DC,EAAAA,WAA9D;AAA2EC,EAAAA;AAA3E,IAA8FN,OAAO,CAAC,SAAD,CAA3G;;AAEA,MAAMO,IAAI,GAAG,IAAIN,iBAAJ,CAAsB;AACjCO,EAAAA,IAAI,EAAE,MAD2B;AAEjCC,EAAAA,WAAW,EAAE,wBAFoB;AAGjCC,EAAAA,MAAM,EAAE,MAAM;AACZ,WAAO;AACLC,MAAAA,EAAE,EAAE;AACFC,QAAAA,IAAI,EAAET,UADJ;;AAEFU,QAAAA,OAAO,CAACC,IAAD,EAAO;AACZ,iBAAOA,IAAI,CAACH,EAAZ;AACD;;AAJC,OADC;AAOLI,MAAAA,SAAS,EAAE;AACTH,QAAAA,IAAI,EAAEV,aADG;;AAETW,QAAAA,OAAO,CAACC,IAAD,EAAO;AACZ,iBAAOA,IAAI,CAACC,SAAZ;AACD;;AAJQ;AAPN,KAAP;AAcD;AAlBgC,CAAtB,CAAb;AAqBA,MAAMC,KAAK,GAAG,IAAIf,iBAAJ,CAAsB;AAClCO,EAAAA,IAAI,EAAE,OAD4B;AAElCC,EAAAA,WAAW,EAAE,sBAFqB;AAGlCC,EAAAA,MAAM,EAAE,MAAM;AACZ,WAAO;AACLO,MAAAA,KAAK,EAAE;AACLL,QAAAA,IAAI,EAAE,IAAIP,WAAJ,CAAgBE,IAAhB,CADD;AAELW,QAAAA,IAAI,EAAE;AACJP,UAAAA,EAAE,EAAE;AACFC,YAAAA,IAAI,EAAET;AADJ,WADA;AAIJY,UAAAA,SAAS,EAAE;AACTH,YAAAA,IAAI,EAAEV;AADG;AAJP,SAFD;;AAUL;AACAW,QAAAA,OAAO,CAACM,IAAD,EAAOD,IAAP,EAAa;AAClB,iBAAOnB,EAAE,CAACqB,MAAH,CAAUN,IAAV,CAAeO,OAAf,CAAuB;AAAEC,YAAAA,KAAK,EAAEJ;AAAT,WAAvB,CAAP;AACD;;AAbI;AADF,KAAP;AAiBD;AArBiC,CAAtB,CAAd;AAwBA,MAAMK,QAAQ,GAAG,IAAItB,iBAAJ,CAAsB;AACrCO,EAAAA,IAAI,EAAE,UAD+B;AAErCC,EAAAA,WAAW,EAAE,4BAFwB;AAGrCC,EAAAA,MAAM,EAAE,MAAM;AACZ,WAAO;AACLc,MAAAA,OAAO,EAAE;AACPZ,QAAAA,IAAI,EAAEL,IADC;AAEPW,QAAAA,IAAI,EAAE;AACJH,UAAAA,SAAS,EAAE;AACTH,YAAAA,IAAI,EAAE,IAAIN,cAAJ,CAAmBJ,aAAnB;AADG;AADP,SAFC;;AAOPW,QAAAA,OAAO,CAACY,CAAD,EAAIP,IAAJ,EAAU;AACf,iBAAOnB,EAAE,CAACqB,MAAH,CAAUN,IAAV,CAAeY,MAAf,CAAsB;AAC3BX,YAAAA,SAAS,EAAEG,IAAI,CAACH;AADW,WAAtB,CAAP;AAGD;;AAXM;AADJ,KAAP;AAeD;AAnBoC,CAAtB,CAAjB;AAsBA,MAAMY,MAAM,GAAG,IAAIvB,aAAJ,CAAkB;AAC/BwB,EAAAA,KAAK,EAAEZ,KADwB;AAE/Ba,EAAAA,QAAQ,EAAEN;AAFqB,CAAlB,CAAf;AAKAO,MAAM,CAACC,OAAP,GAAiBJ,MAAjB",
      "sourceRoot": "/home/scorp/git/appwork/silver-adventure/database/schema/",
      "sourcesContent": [
        "const db = require('../models/models')\n\nconst {GraphQLObjectType, GraphQLString, GraphQLInt, GraphQLSchema, GraphQLList, GraphQLNonNull } = require('graphql')\n\nconst User = new GraphQLObjectType({\n  name: 'User',\n  description: 'this represents a user',\n  fields: () => {\n    return {\n      id: {\n        type: GraphQLInt,\n        resolve(user) {\n          return user.id\n        }\n      },\n      firstName: {\n        type: GraphQLString,\n        resolve(user) {\n          return user.firstName\n        }\n      }\n    }\n  }\n})\n\nconst Query = new GraphQLObjectType({\n  name: 'Query',\n  description: 'this is a root query',\n  fields: () => {\n    return {\n      users: {\n        type: new GraphQLList(User),\n        args: {\n          id: {\n            type: GraphQLInt\n          },\n          firstName: {\n            type: GraphQLString\n          }\n        },\n        //validations can go here\n        resolve(root, args) {\n          return db.models.user.findAll({ where: args })\n        }\n      }\n    }\n  }\n})\n\nconst Mutation = new GraphQLObjectType({\n  name: 'Mutation',\n  description: 'Functions to create things',\n  fields: () => {\n    return {\n      addUser: {\n        type: User,\n        args: {\n          firstName: {\n            type: new GraphQLNonNull(GraphQLString)\n          }\n        },\n        resolve(_, args) {\n          return db.models.user.create({\n            firstName: args.firstName\n          })\n        }\n      }\n    }\n  }\n})\n\nconst Schema = new GraphQLSchema({\n  query: Query,\n  mutation: Mutation\n})\n\nmodule.exports = Schema\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1634003286786
  },
  "{\"assumptions\":{},\"sourceRoot\":\"/home/scorp/git/appwork/silver-adventure/database/models/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/scorp/git/appwork/silver-adventure\",\"filename\":\"/home/scorp/git/appwork/silver-adventure/database/models/models.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/scorp/git/appwork/silver-adventure\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.15.8": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "/home/scorp/git/appwork/silver-adventure/database/models/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/home/scorp/git/appwork/silver-adventure",
      "filename": "/home/scorp/git/appwork/silver-adventure/database/models/models.js",
      "targets": {},
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "browserslistConfigFile": false,
      "envName": "development",
      "root": "/home/scorp/git/appwork/silver-adventure",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/scorp/git/appwork/silver-adventure/database/models/models.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/home/scorp/git/appwork/silver-adventure/database/models/models.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/scorp/git/appwork/silver-adventure/database/models/",
        "sourceFileName": "models.js"
      }
    },
    "ast": null,
    "code": "const Sequelize = require('sequelize');\n\nconst HOST = \"localhost\";\nconst PORT = \"5432\";\nconst DATABASE = \"medium\";\nconst sequelize = new Sequelize(`postgres://${HOST}:${PORT}/${DATABASE}`);\nconst User = sequelize.define('user', {\n  // attributes\n  firstName: {\n    type: Sequelize.STRING,\n    allowNull: false\n  }\n});\nsequelize.sync({\n  force: true\n}).then(() => {\n  return User.create({\n    firstName: 'Dons'\n  });\n});\nmodule.exports = sequelize;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZGVscy5qcyJdLCJuYW1lcyI6WyJTZXF1ZWxpemUiLCJyZXF1aXJlIiwiSE9TVCIsIlBPUlQiLCJEQVRBQkFTRSIsInNlcXVlbGl6ZSIsIlVzZXIiLCJkZWZpbmUiLCJmaXJzdE5hbWUiLCJ0eXBlIiwiU1RSSU5HIiwiYWxsb3dOdWxsIiwic3luYyIsImZvcmNlIiwidGhlbiIsImNyZWF0ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLFNBQVMsR0FBR0MsT0FBTyxDQUFDLFdBQUQsQ0FBekI7O0FBQ0EsTUFBTUMsSUFBSSxHQUFHLFdBQWI7QUFDQSxNQUFNQyxJQUFJLEdBQUcsTUFBYjtBQUNBLE1BQU1DLFFBQVEsR0FBRyxRQUFqQjtBQUNBLE1BQU1DLFNBQVMsR0FBRyxJQUFJTCxTQUFKLENBQWUsY0FBYUUsSUFBSyxJQUFHQyxJQUFLLElBQUdDLFFBQVMsRUFBckQsQ0FBbEI7QUFHQSxNQUFNRSxJQUFJLEdBQUdELFNBQVMsQ0FBQ0UsTUFBVixDQUFpQixNQUFqQixFQUF5QjtBQUNwQztBQUNBQyxFQUFBQSxTQUFTLEVBQUU7QUFDVEMsSUFBQUEsSUFBSSxFQUFFVCxTQUFTLENBQUNVLE1BRFA7QUFFVEMsSUFBQUEsU0FBUyxFQUFFO0FBRkY7QUFGeUIsQ0FBekIsQ0FBYjtBQVFBTixTQUFTLENBQUNPLElBQVYsQ0FBZTtBQUFFQyxFQUFBQSxLQUFLLEVBQUU7QUFBVCxDQUFmLEVBQWdDQyxJQUFoQyxDQUFxQyxNQUFNO0FBQ3pDLFNBQU9SLElBQUksQ0FBQ1MsTUFBTCxDQUFZO0FBQ2pCUCxJQUFBQSxTQUFTLEVBQUU7QUFETSxHQUFaLENBQVA7QUFHRCxDQUpEO0FBT0FRLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQlosU0FBakIiLCJzb3VyY2VSb290IjoiL2hvbWUvc2NvcnAvZ2l0L2FwcHdvcmsvc2lsdmVyLWFkdmVudHVyZS9kYXRhYmFzZS9tb2RlbHMvIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgU2VxdWVsaXplID0gcmVxdWlyZSgnc2VxdWVsaXplJylcbmNvbnN0IEhPU1QgPSBcImxvY2FsaG9zdFwiXG5jb25zdCBQT1JUID0gXCI1NDMyXCJcbmNvbnN0IERBVEFCQVNFID0gXCJtZWRpdW1cIlxuY29uc3Qgc2VxdWVsaXplID0gbmV3IFNlcXVlbGl6ZShgcG9zdGdyZXM6Ly8ke0hPU1R9OiR7UE9SVH0vJHtEQVRBQkFTRX1gKVxuXG5cbmNvbnN0IFVzZXIgPSBzZXF1ZWxpemUuZGVmaW5lKCd1c2VyJywge1xuICAvLyBhdHRyaWJ1dGVzXG4gIGZpcnN0TmFtZToge1xuICAgIHR5cGU6IFNlcXVlbGl6ZS5TVFJJTkcsXG4gICAgYWxsb3dOdWxsOiBmYWxzZVxuICB9XG59KVxuXG5zZXF1ZWxpemUuc3luYyh7IGZvcmNlOiB0cnVlIH0pLnRoZW4oKCkgPT4ge1xuICByZXR1cm4gVXNlci5jcmVhdGUoe1xuICAgIGZpcnN0TmFtZTogJ0RvbnMnXG4gIH0pXG59KVxuXG5cbm1vZHVsZS5leHBvcnRzID0gc2VxdWVsaXplO1xuIl19",
    "map": {
      "version": 3,
      "sources": [
        "models.js"
      ],
      "names": [
        "Sequelize",
        "require",
        "HOST",
        "PORT",
        "DATABASE",
        "sequelize",
        "User",
        "define",
        "firstName",
        "type",
        "STRING",
        "allowNull",
        "sync",
        "force",
        "then",
        "create",
        "module",
        "exports"
      ],
      "mappings": "AAAA,MAAMA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMC,IAAI,GAAG,WAAb;AACA,MAAMC,IAAI,GAAG,MAAb;AACA,MAAMC,QAAQ,GAAG,QAAjB;AACA,MAAMC,SAAS,GAAG,IAAIL,SAAJ,CAAe,cAAaE,IAAK,IAAGC,IAAK,IAAGC,QAAS,EAArD,CAAlB;AAGA,MAAME,IAAI,GAAGD,SAAS,CAACE,MAAV,CAAiB,MAAjB,EAAyB;AACpC;AACAC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAET,SAAS,CAACU,MADP;AAETC,IAAAA,SAAS,EAAE;AAFF;AAFyB,CAAzB,CAAb;AAQAN,SAAS,CAACO,IAAV,CAAe;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAAf,EAAgCC,IAAhC,CAAqC,MAAM;AACzC,SAAOR,IAAI,CAACS,MAAL,CAAY;AACjBP,IAAAA,SAAS,EAAE;AADM,GAAZ,CAAP;AAGD,CAJD;AAOAQ,MAAM,CAACC,OAAP,GAAiBZ,SAAjB",
      "sourceRoot": "/home/scorp/git/appwork/silver-adventure/database/models/",
      "sourcesContent": [
        "const Sequelize = require('sequelize')\nconst HOST = \"localhost\"\nconst PORT = \"5432\"\nconst DATABASE = \"medium\"\nconst sequelize = new Sequelize(`postgres://${HOST}:${PORT}/${DATABASE}`)\n\n\nconst User = sequelize.define('user', {\n  // attributes\n  firstName: {\n    type: Sequelize.STRING,\n    allowNull: false\n  }\n})\n\nsequelize.sync({ force: true }).then(() => {\n  return User.create({\n    firstName: 'Dons'\n  })\n})\n\n\nmodule.exports = sequelize;\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1634003853255
  }
}